import collections.abc
import enum
import nanobind
from typing import Callable, ClassVar, overload

DEVICE_INTERFACE_VERSION: int
add: nanobind.nb_func

class CMMCore:
    enableFeature: ClassVar[nanobind.nb_func] = ...
    isFeatureEnabled: ClassVar[nanobind.nb_func] = ...
    def __init__(self) -> None: ...
    def debugLogEnabled(self) -> bool: ...
    @overload
    def defineConfig(self, groupName: str, configName: str) -> None: ...
    @overload
    def defineConfig(self, groupName: str, configName: str, deviceLabel: str, propName: str, value: str) -> None: ...
    def defineConfigGroup(self, groupName: str) -> None: ...
    @overload
    def definePixelSizeConfig(self, resolutionID: str, deviceLabel: str, propName: str, value: str) -> None: ...
    @overload
    def definePixelSizeConfig(self, resolutionID: str) -> None: ...
    @overload
    def deleteConfig(self, groupName: str, configName: str) -> None: ...
    @overload
    def deleteConfig(self, groupName: str, configName: str, deviceLabel: str, propName: str) -> None: ...
    def deleteConfigGroup(self, groupName: str) -> None: ...
    def deletePixelSizeConfig(self, configName: str) -> None: ...
    def deviceBusy(self, label: str) -> bool: ...
    def deviceTypeBusy(self, devType: DeviceType) -> bool: ...
    def enableDebugLog(self, enable: bool) -> None: ...
    def enableStderrLog(self, enable: bool) -> None: ...
    def getAPIVersionInfo(self) -> str: ...
    def getAllowedPropertyValues(self, label: str, propName: str) -> list[str]: ...
    def getAutoFocusDevice(self) -> str: ...
    def getAvailableConfigGroups(self) -> list[str]: ...
    def getAvailableConfigs(self, configGroup: str) -> list[str]: ...
    def getAvailableDeviceDescriptions(self, library: str) -> list[str]: ...
    def getAvailableDeviceTypes(self, library: str) -> list[int]: ...
    def getAvailableDevices(self, library: str) -> list[str]: ...
    def getAvailablePixelSizeConfigs(self) -> list[str]: ...
    def getCameraDevice(self) -> str: ...
    def getChannelGroup(self) -> str: ...
    def getConfigData(self, configGroup: str, configName: str) -> Configuration: ...
    def getConfigGroupState(self, group: str) -> Configuration: ...
    def getConfigGroupStateFromCache(self, group: str) -> Configuration: ...
    def getConfigState(self, group: str, config: str) -> Configuration: ...
    def getCoreErrorText(self, code: int) -> str: ...
    def getCurrentConfig(self, groupName: str) -> str: ...
    def getCurrentConfigFromCache(self, groupName: str) -> str: ...
    @overload
    def getCurrentPixelSizeConfig(self) -> str: ...
    @overload
    def getCurrentPixelSizeConfig(self, cached: bool) -> str: ...
    def getDeviceAdapterNames(self) -> list[str]: ...
    def getDeviceAdapterSearchPaths(self) -> list[str]: ...
    def getDeviceDelayMs(self, label: str) -> float: ...
    def getDeviceDescription(self, label: str) -> str: ...
    def getDeviceInitializationState(self, label: str) -> DeviceInitializationState: ...
    def getDeviceLibrary(self, label: str) -> str: ...
    def getDeviceName(self, label: str) -> str: ...
    def getDevicePropertyNames(self, label: str) -> list[str]: ...
    def getDeviceType(self, label: str) -> DeviceType: ...
    def getFocusDevice(self) -> str: ...
    def getGalvoDevice(self) -> str: ...
    def getImageProcessorDevice(self) -> str: ...
    def getLoadedDevices(self) -> list[str]: ...
    def getLoadedDevicesOfType(self, devType: DeviceType) -> list[str]: ...
    def getMagnificationFactor(self) -> float: ...
    @overload
    def getPixelSizeAffine(self) -> list[float]: ...
    @overload
    def getPixelSizeAffine(self, cached: bool) -> list[float]: ...
    def getPixelSizeAffineByID(self, resolutionID: str) -> list[float]: ...
    def getPixelSizeConfigData(self, configName: str) -> Configuration: ...
    @overload
    def getPixelSizeUm(self) -> float: ...
    @overload
    def getPixelSizeUm(self, cached: bool) -> float: ...
    def getPixelSizeUmByID(self, resolutionID: str) -> float: ...
    def getPrimaryLogFile(self) -> str: ...
    def getProperty(self, label: str, propName: str) -> str: ...
    def getPropertyFromCache(self, deviceLabel: str, propName: str) -> str: ...
    def getPropertyLowerLimit(self, label: str, propName: str) -> float: ...
    def getPropertySequenceMaxLength(self, label: str, propName: str) -> int: ...
    def getPropertyType(self, label: str, propName: str) -> PropertyType: ...
    def getPropertyUpperLimit(self, label: str, propName: str) -> float: ...
    def getSLMDevice(self) -> str: ...
    def getShutterDevice(self) -> str: ...
    def getSystemState(self) -> Configuration: ...
    def getSystemStateCache(self) -> Configuration: ...
    def getTimeoutMs(self) -> int: ...
    def getVersionInfo(self) -> str: ...
    def getXYStageDevice(self) -> str: ...
    def hasProperty(self, label: str, propName: str) -> bool: ...
    def hasPropertyLimits(self, label: str, propName: str) -> bool: ...
    def initializeAllDevices(self) -> None: ...
    def initializeDevice(self, label: str) -> None: ...
    def isConfigDefined(self, groupName: str, configName: str) -> bool: ...
    def isGroupDefined(self, groupName: str) -> bool: ...
    def isPixelSizeConfigDefined(self, resolutionID: str) -> bool: ...
    def isPropertyPreInit(self, label: str, propName: str) -> bool: ...
    def isPropertyReadOnly(self, label: str, propName: str) -> bool: ...
    def isPropertySequenceable(self, label: str, propName: str) -> bool: ...
    def loadDevice(self, label: str, moduleName: str, deviceName: str) -> None: ...
    def loadPropertySequence(self, label: str, propName: str, eventSequence: collections.abc.Sequence[str]) -> None: ...
    def loadSystemConfiguration(self, fileName: str) -> None: ...
    def loadSystemState(self, fileName: str) -> None: ...
    @overload
    def logMessage(self, msg: str) -> None: ...
    @overload
    def logMessage(self, msg: str, debugOnly: bool) -> None: ...
    def registerCallback(self, cb: MMEventCallback) -> None: ...
    def renameConfig(self, groupName: str, oldConfigName: str, newConfigName: str) -> None: ...
    def renameConfigGroup(self, oldGroupName: str, newGroupName: str) -> None: ...
    def renamePixelSizeConfig(self, oldConfigName: str, newConfigName: str) -> None: ...
    def reset(self) -> None: ...
    def saveSystemConfiguration(self, fileName: str) -> None: ...
    def saveSystemState(self, fileName: str) -> None: ...
    def setAutoFocusDevice(self, focusLabel: str) -> None: ...
    def setCameraDevice(self, cameraLabel: str) -> None: ...
    def setChannelGroup(self, channelGroup: str) -> None: ...
    def setConfig(self, groupName: str, configName: str) -> None: ...
    def setDeviceAdapterSearchPaths(self, paths: collections.abc.Sequence[str]) -> None: ...
    def setDeviceDelayMs(self, label: str, delayMs: float) -> None: ...
    def setFocusDevice(self, focusLabel: str) -> None: ...
    def setGalvoDevice(self, galvoLabel: str) -> None: ...
    def setImageProcessorDevice(self, procLabel: str) -> None: ...
    def setPixelSizeAffine(self, resolutionID: str, affine: collections.abc.Sequence[float]) -> None: ...
    def setPixelSizeConfig(self, resolutionID: str) -> None: ...
    def setPixelSizeUm(self, resolutionID: str, pixSize: float) -> None: ...
    def setPrimaryLogFile(self, filename: str, truncate: bool = ...) -> None: ...
    @overload
    def setProperty(self, label: str, propName: str, propValue: str) -> None: ...
    @overload
    def setProperty(self, label: str, propName: str, propValue: bool) -> None: ...
    @overload
    def setProperty(self, label: str, propName: str, propValue: int) -> None: ...
    @overload
    def setProperty(self, label: str, propName: str, propValue: float) -> None: ...
    def setSLMDevice(self, slmLabel: str) -> None: ...
    def setShutterDevice(self, shutterLabel: str) -> None: ...
    def setSystemState(self, conf: Configuration) -> None: ...
    def setTimeoutMs(self, timeoutMs: int) -> None: ...
    def setXYStageDevice(self, xyStageLabel: str) -> None: ...
    def sleep(self, intervalMs: float) -> None: ...
    def startPropertySequence(self, label: str, propName: str) -> None: ...
    def startSecondaryLogFile(self, filename: str, enableDebug: bool, truncate: bool = ..., synchronous: bool = ...) -> int: ...
    def stderrLogEnabled(self) -> bool: ...
    def stopPropertySequence(self, label: str, propName: str) -> None: ...
    def stopSecondaryLogFile(self, handle: int) -> None: ...
    def systemBusy(self) -> bool: ...
    def unloadAllDevices(self) -> None: ...
    def unloadDevice(self, label: str) -> None: ...
    def unloadLibrary(self, moduleName: str) -> None: ...
    def updateCoreProperties(self) -> None: ...
    def updateSystemStateCache(self) -> None: ...
    def usesDeviceDelay(self, label: str) -> bool: ...
    def waitForConfig(self, group: str, configName: str) -> None: ...
    def waitForDevice(self, label: str) -> None: ...
    def waitForDeviceType(self, devType: DeviceType) -> None: ...
    def waitForSystem(self) -> None: ...

class Configuration:
    def __init__(self) -> None: ...

class DeviceDetectionStatus(enum.IntEnum):
    __new__: ClassVar[Callable] = ...
    CanCommunicate: ClassVar[DeviceDetectionStatus] = ...
    CanNotCommunicate: ClassVar[DeviceDetectionStatus] = ...
    Misconfigured: ClassVar[DeviceDetectionStatus] = ...
    Unimplemented: ClassVar[DeviceDetectionStatus] = ...
    _generate_next_value_: ClassVar[Callable] = ...
    _member_map_: ClassVar[dict] = ...
    _member_names_: ClassVar[list] = ...
    _member_type_: ClassVar[type[int]] = ...
    _unhashable_values_: ClassVar[list] = ...
    _use_args_: ClassVar[bool] = ...
    _value2member_map_: ClassVar[dict] = ...
    __nb_enum__: ClassVar[PyCapsule] = ...
    def __format__(self, *args, **kwargs) -> str: ...

class DeviceInitializationState(enum.IntEnum):
    __new__: ClassVar[Callable] = ...
    CoreBusy: ClassVar[DeviceInitializationState] = ...
    CoreError: ClassVar[DeviceInitializationState] = ...
    CoreIdle: ClassVar[DeviceInitializationState] = ...
    _generate_next_value_: ClassVar[Callable] = ...
    _member_map_: ClassVar[dict] = ...
    _member_names_: ClassVar[list] = ...
    _member_type_: ClassVar[type[int]] = ...
    _unhashable_values_: ClassVar[list] = ...
    _use_args_: ClassVar[bool] = ...
    _value2member_map_: ClassVar[dict] = ...
    __nb_enum__: ClassVar[PyCapsule] = ...
    def __format__(self, *args, **kwargs) -> str: ...

class DeviceType(enum.IntEnum):
    __new__: ClassVar[Callable] = ...
    AnyType: ClassVar[DeviceType] = ...
    AutoFocusDevice: ClassVar[DeviceType] = ...
    CameraDevice: ClassVar[DeviceType] = ...
    CoreDevice: ClassVar[DeviceType] = ...
    GalvoDevice: ClassVar[DeviceType] = ...
    GenericDevice: ClassVar[DeviceType] = ...
    HubDevice: ClassVar[DeviceType] = ...
    ImageProcessorDevice: ClassVar[DeviceType] = ...
    MagnifierDevice: ClassVar[DeviceType] = ...
    SLMDevice: ClassVar[DeviceType] = ...
    SerialDevice: ClassVar[DeviceType] = ...
    ShutterDevice: ClassVar[DeviceType] = ...
    SignalIODevice: ClassVar[DeviceType] = ...
    StageDevice: ClassVar[DeviceType] = ...
    StateDevice: ClassVar[DeviceType] = ...
    UnknownType: ClassVar[DeviceType] = ...
    XYStageDevice: ClassVar[DeviceType] = ...
    _generate_next_value_: ClassVar[Callable] = ...
    _member_map_: ClassVar[dict] = ...
    _member_names_: ClassVar[list] = ...
    _member_type_: ClassVar[type[int]] = ...
    _unhashable_values_: ClassVar[list] = ...
    _use_args_: ClassVar[bool] = ...
    _value2member_map_: ClassVar[dict] = ...
    __nb_enum__: ClassVar[PyCapsule] = ...
    def __format__(self, *args, **kwargs) -> str: ...

class FocusDirection(enum.IntEnum):
    __new__: ClassVar[Callable] = ...
    FocusDirectionAwayFromSample: ClassVar[FocusDirection] = ...
    FocusDirectionTowardSample: ClassVar[FocusDirection] = ...
    FocusDirectionUnknown: ClassVar[FocusDirection] = ...
    _generate_next_value_: ClassVar[Callable] = ...
    _member_map_: ClassVar[dict] = ...
    _member_names_: ClassVar[list] = ...
    _member_type_: ClassVar[type[int]] = ...
    _unhashable_values_: ClassVar[list] = ...
    _use_args_: ClassVar[bool] = ...
    _value2member_map_: ClassVar[dict] = ...
    __nb_enum__: ClassVar[PyCapsule] = ...
    def __format__(self, *args, **kwargs) -> str: ...

class MMEventCallback:
    def __init__(self) -> None: ...

class PortType(enum.IntEnum):
    __new__: ClassVar[Callable] = ...
    HIDPort: ClassVar[PortType] = ...
    InvalidPort: ClassVar[PortType] = ...
    SerialPort: ClassVar[PortType] = ...
    USBPort: ClassVar[PortType] = ...
    _generate_next_value_: ClassVar[Callable] = ...
    _member_map_: ClassVar[dict] = ...
    _member_names_: ClassVar[list] = ...
    _member_type_: ClassVar[type[int]] = ...
    _unhashable_values_: ClassVar[list] = ...
    _use_args_: ClassVar[bool] = ...
    _value2member_map_: ClassVar[dict] = ...
    __nb_enum__: ClassVar[PyCapsule] = ...
    def __format__(self, *args, **kwargs) -> str: ...

class PropertyType(enum.IntEnum):
    __new__: ClassVar[Callable] = ...
    Float: ClassVar[PropertyType] = ...
    Integer: ClassVar[PropertyType] = ...
    String: ClassVar[PropertyType] = ...
    Undef: ClassVar[PropertyType] = ...
    _generate_next_value_: ClassVar[Callable] = ...
    _member_map_: ClassVar[dict] = ...
    _member_names_: ClassVar[list] = ...
    _member_type_: ClassVar[type[int]] = ...
    _unhashable_values_: ClassVar[list] = ...
    _use_args_: ClassVar[bool] = ...
    _value2member_map_: ClassVar[dict] = ...
    __nb_enum__: ClassVar[PyCapsule] = ...
    def __format__(self, *args, **kwargs) -> str: ...
